// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: blog_tag.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createBlogTag = `-- name: CreateBlogTag :execresult
INSERT INTO blog_tag (
    ` + "`" + `name` + "`" + `,created_by
) VALUES(
    ?,?
)
`

type CreateBlogTagParams struct {
	Name      sql.NullString `json:"name"`
	CreatedBy sql.NullString `json:"created_by"`
}

func (q *Queries) CreateBlogTag(ctx context.Context, arg CreateBlogTagParams) (sql.Result, error) {
	return q.exec(ctx, q.createBlogTagStmt, createBlogTag, arg.Name, arg.CreatedBy)
}

const deleteBlogTag = `-- name: DeleteBlogTag :execresult
UPDATE blog_tag
SET ` + "`" + `state` + "`" + ` = 0, deleted_on = ?
WHERE id = ?
`

type DeleteBlogTagParams struct {
	DeletedOn time.Time `json:"deleted_on"`
	ID        int32     `json:"id"`
}

func (q *Queries) DeleteBlogTag(ctx context.Context, arg DeleteBlogTagParams) (sql.Result, error) {
	return q.exec(ctx, q.deleteBlogTagStmt, deleteBlogTag, arg.DeletedOn, arg.ID)
}

const getBlogTag = `-- name: GetBlogTag :one
SELECT id, name, created_on, created_by, modified_on, modified_by, deleted_on, state FROM blog_tag
WHERE id=? LIMIT 1
`

func (q *Queries) GetBlogTag(ctx context.Context, id int32) (BlogTag, error) {
	row := q.queryRow(ctx, q.getBlogTagStmt, getBlogTag, id)
	var i BlogTag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedOn,
		&i.CreatedBy,
		&i.ModifiedOn,
		&i.ModifiedBy,
		&i.DeletedOn,
		&i.State,
	)
	return i, err
}

const listBlogTag = `-- name: ListBlogTag :many
SELECT id, name, created_on, created_by, modified_on, modified_by, deleted_on, state FROM blog_tag
WHERE created_by = ?
ORDER BY id
LIMIT ?
OFFSET ?
`

type ListBlogTagParams struct {
	CreatedBy sql.NullString `json:"created_by"`
	Limit     int32          `json:"limit"`
	Offset    int32          `json:"offset"`
}

func (q *Queries) ListBlogTag(ctx context.Context, arg ListBlogTagParams) ([]BlogTag, error) {
	rows, err := q.query(ctx, q.listBlogTagStmt, listBlogTag, arg.CreatedBy, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BlogTag{}
	for rows.Next() {
		var i BlogTag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedOn,
			&i.CreatedBy,
			&i.ModifiedOn,
			&i.ModifiedBy,
			&i.DeletedOn,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlogTag = `-- name: UpdateBlogTag :execresult
UPDATE blog_tag
SET ` + "`" + `name` + "`" + ` = ?, modified_by = ?, modified_on = ?
WHERE id = ?
`

type UpdateBlogTagParams struct {
	Name       sql.NullString `json:"name"`
	ModifiedBy sql.NullString `json:"modified_by"`
	ModifiedOn time.Time      `json:"modified_on"`
	ID         int32          `json:"id"`
}

func (q *Queries) UpdateBlogTag(ctx context.Context, arg UpdateBlogTagParams) (sql.Result, error) {
	return q.exec(ctx, q.updateBlogTagStmt, updateBlogTag,
		arg.Name,
		arg.ModifiedBy,
		arg.ModifiedOn,
		arg.ID,
	)
}
