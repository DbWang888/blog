// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: blog_user.sql

package db

import (
	"context"
	"database/sql"
)

const createAuth = `-- name: CreateAuth :execresult
INSERT INTO blog_auth (
    username,` + "`" + `password` + "`" + `
) VALUES(
    ?,?
)
`

type CreateAuthParams struct {
	Username sql.NullString `json:"username"`
	Password sql.NullString `json:"password"`
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) (sql.Result, error) {
	return q.exec(ctx, q.createAuthStmt, createAuth, arg.Username, arg.Password)
}

const getAuthByID = `-- name: GetAuthByID :one
SELECT id, username, password, created_on FROM blog_auth
WHERE id = ?
`

func (q *Queries) GetAuthByID(ctx context.Context, id int32) (BlogAuth, error) {
	row := q.queryRow(ctx, q.getAuthByIDStmt, getAuthByID, id)
	var i BlogAuth
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedOn,
	)
	return i, err
}

const getAuthByUserName = `-- name: GetAuthByUserName :one
SELECT id, username, password, created_on FROM blog_auth
WHERE username = ?
`

func (q *Queries) GetAuthByUserName(ctx context.Context, username sql.NullString) (BlogAuth, error) {
	row := q.queryRow(ctx, q.getAuthByUserNameStmt, getAuthByUserName, username)
	var i BlogAuth
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedOn,
	)
	return i, err
}
