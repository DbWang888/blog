// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: blog_article.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createBlogArticle = `-- name: CreateBlogArticle :execresult
INSERT INTO blog_article (
    tag_id,title,` + "`" + `desc` + "`" + `,content,created_by
) VALUES(
    ?,?,?,?,?
)
`

type CreateBlogArticleParams struct {
	TagID     sql.NullInt32  `json:"tag_id"`
	Title     sql.NullString `json:"title"`
	Desc      sql.NullString `json:"desc"`
	Content   sql.NullString `json:"content"`
	CreatedBy sql.NullString `json:"created_by"`
}

func (q *Queries) CreateBlogArticle(ctx context.Context, arg CreateBlogArticleParams) (sql.Result, error) {
	return q.exec(ctx, q.createBlogArticleStmt, createBlogArticle,
		arg.TagID,
		arg.Title,
		arg.Desc,
		arg.Content,
		arg.CreatedBy,
	)
}

const deleteArticle = `-- name: DeleteArticle :execresult
UPDATE blog_article
SET state = 0,deleted_on=?
WHERE id = ?
`

type DeleteArticleParams struct {
	DeletedOn time.Time `json:"deleted_on"`
	ID        int32     `json:"id"`
}

func (q *Queries) DeleteArticle(ctx context.Context, arg DeleteArticleParams) (sql.Result, error) {
	return q.exec(ctx, q.deleteArticleStmt, deleteArticle, arg.DeletedOn, arg.ID)
}

const getBlogArticles = `-- name: GetBlogArticles :one
SELECT id, tag_id, title, ` + "`" + `desc` + "`" + `, content, created_on, created_by, modified_on, modified_by, deleted_on, state FROM blog_article
WHERE id = ? LIMIT 1
`

func (q *Queries) GetBlogArticles(ctx context.Context, id int32) (BlogArticle, error) {
	row := q.queryRow(ctx, q.getBlogArticlesStmt, getBlogArticles, id)
	var i BlogArticle
	err := row.Scan(
		&i.ID,
		&i.TagID,
		&i.Title,
		&i.Desc,
		&i.Content,
		&i.CreatedOn,
		&i.CreatedBy,
		&i.ModifiedOn,
		&i.ModifiedBy,
		&i.DeletedOn,
		&i.State,
	)
	return i, err
}

const listAllArticles = `-- name: ListAllArticles :many
SELECT id, tag_id, title, ` + "`" + `desc` + "`" + `, content, created_on, created_by, modified_on, modified_by, deleted_on, state FROM blog_article
ORDER BY id
LIMIT ?,?
`

type ListAllArticlesParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) ListAllArticles(ctx context.Context, arg ListAllArticlesParams) ([]BlogArticle, error) {
	rows, err := q.query(ctx, q.listAllArticlesStmt, listAllArticles, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BlogArticle{}
	for rows.Next() {
		var i BlogArticle
		if err := rows.Scan(
			&i.ID,
			&i.TagID,
			&i.Title,
			&i.Desc,
			&i.Content,
			&i.CreatedOn,
			&i.CreatedBy,
			&i.ModifiedOn,
			&i.ModifiedBy,
			&i.DeletedOn,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBlogAtricles = `-- name: ListBlogAtricles :many
SELECT id, tag_id, title, ` + "`" + `desc` + "`" + `, content, created_on, created_by, modified_on, modified_by, deleted_on, state FROM blog_article
WHERE created_by = ?
ORDER BY id
LIMIT ?,?
`

type ListBlogAtriclesParams struct {
	CreatedBy sql.NullString `json:"created_by"`
	Offset    int32          `json:"offset"`
	Limit     int32          `json:"limit"`
}

func (q *Queries) ListBlogAtricles(ctx context.Context, arg ListBlogAtriclesParams) ([]BlogArticle, error) {
	rows, err := q.query(ctx, q.listBlogAtriclesStmt, listBlogAtricles, arg.CreatedBy, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BlogArticle{}
	for rows.Next() {
		var i BlogArticle
		if err := rows.Scan(
			&i.ID,
			&i.TagID,
			&i.Title,
			&i.Desc,
			&i.Content,
			&i.CreatedOn,
			&i.CreatedBy,
			&i.ModifiedOn,
			&i.ModifiedBy,
			&i.DeletedOn,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlogArticle = `-- name: UpdateBlogArticle :execresult
UPDATE blog_article
SET tag_id=?,title=?,` + "`" + `desc` + "`" + `=?,content=?,modified_by=?,modified_on=?
WHERE id = ?
`

type UpdateBlogArticleParams struct {
	TagID      sql.NullInt32  `json:"tag_id"`
	Title      sql.NullString `json:"title"`
	Desc       sql.NullString `json:"desc"`
	Content    sql.NullString `json:"content"`
	ModifiedBy sql.NullString `json:"modified_by"`
	ModifiedOn time.Time      `json:"modified_on"`
	ID         int32          `json:"id"`
}

func (q *Queries) UpdateBlogArticle(ctx context.Context, arg UpdateBlogArticleParams) (sql.Result, error) {
	return q.exec(ctx, q.updateBlogArticleStmt, updateBlogArticle,
		arg.TagID,
		arg.Title,
		arg.Desc,
		arg.Content,
		arg.ModifiedBy,
		arg.ModifiedOn,
		arg.ID,
	)
}
